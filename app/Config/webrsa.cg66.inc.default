<?php
	/**
	 *
	 * CONFIGURATION SPÉCIFIQUE POUR LE DÉPARTEMENT
	 *
	 * On ne laisse que les configurations spécifiques pour le département
	 *
	 * ou celles qui doivent être surchargées pour le département.
	 *
	 */

	/**
	 * Paramétrage de la génération de documents PDF au moyen de Gedooo.
	 *
	 * Les clés de configuration possibles sont:
	 *	- method: la méthode permettant de générer le document de sortie; valeurs
	 *		possibles: classic, unoconv, cloudooo (ainsi que cloudooo_ancien et
	 *		unoconv_ancien)
	 *	- wsdl: l'URL du web-service, utilisé quelle que soit la méthode de
	 *		génération; exemple: http://192.168.2.35:8880/ODFgedooo/OfficeService?wsdl
	 *	- unoconv_bin: chemin vers le binaire unoconv, lorsque la méthode unoconv
	 *		ou unoconv_ancien est paramétrée; exemple: /usr/bin/unoconv
	 *	- cloudooo_host: le serveur cloudooo, lorsque la méthode cloudooo ou
	 *		cloudooo_ancien est utilisée; exemple: 192.168.2.35
	 *	- cloudooo_port: le port du serveur cloudooo, lorsque la méthode cloudooo
	 *		ou cloudooo_ancien est utilisée; exemple: 8012
	 *	- debug_export_data: permet d'exporter les données envoyées en plus des noms
	 *		des variables dans un fichier du répertoire app/tmp/logs lorsque l'on
	 *		n'est pas en mode production; false (par défaut) ou true
	 *	- dont_force_newlines: pour que les retours à la ligne ne soient pas forcés
	 *		(ancien comportement de unoconv et cloudooo); false (par défaut) ou true
	 *	- filter_vars: permet de filtrer les variables envoyées à l'impression en
	 *		analysant les variables utilisateur définies dans le modèle ; false
	 *		(par défaut) ou true
	 */
	/**
	 * Nouvelle façon de paramétrer la génération de documents PDF via Gedooo.
	 *
	 * Ci-dessous, l'ensemble des clés de configuration possibles.
	 *
	 * array(
	 *	'method' => 'classic', // classic, unoconv, cloudooo
	 *	// Ancien serveur Gedooo
	 *	// 'wsdl' => 'http://gedooo.test.adullact.org:8080/axis2/services/OfficeService?wsdl',
	 *	// Nouveau serveur Gedooo
	 *	'wsdl' => 'http://gedooo.test.adullact.org:8880/ODFgedooo/OfficeService?wsdl',
	 *	// Pour Unoconv
	 *	'unoconv_bin' => '/home/cbuffin/Bureau/1/usr/bin/unoconv',
	 *	// Pour Cloudooo
	 *	'cloudooo_host' => 'xx.xx.xx.xx',
	 *	'cloudooo_port' => '8012'
	 * )
	 */
	Configure::write(
		'Gedooo',
		array(
			'method' => 'cloudooo',
			'wsdl' => 'http://127.0.0.1:8880/ODFgedooo-0.8.05/OfficeService?wsdl',
			'cloudooo_host' => '127.0.0.1',
			'cloudooo_port' => '8011',
			'filter_vars' => true
		)
	);

	/**
	 *
	 */
	Configure::write( 'with_parentid', true ); // true = cg66
	Configure::write( 'CG.cantons', true ); // false = cg93, true = cg66

	/**
	 * Montant maximal des apres complémentaires pour une personne au cours
	 * de la période de temps définie par Apre.periodeMontantMaxComplementaires.
	 * @default 2600
	 * cg66 -> 3000
	 */
	Configure::write( 'Apre.montantMaxComplementaires', 3000 );

	/**
	 * Paramètre à renseigner pour l'utilisation du bon MVC
	 * @default: vide (pour le CG93), sinon '66' pour le CG66
	 */
	Configure::write( 'Apre.suffixe', Configure::read( 'Cg.departement' ) );

	/**
	 *   Paramètres à renseigner pour les montants des
	 *   forfaits de déplacements des APREs pour le CG66
	 *   @default:   0.20€ pour les forfaits au Km
	 *               23€ pour les frais d'hebergement
	 *               3.81€ pour les frais de repas
	 */
	Configure::write( 'Fraisdeplacement66.forfaitvehicule', 0.20 );
	Configure::write( 'Fraisdeplacement66.forfaithebergt', 23 );
	Configure::write( 'Fraisdeplacement66.forfaitrepas', 3.81 );

	/**
	 * Permet à l'administrateur d'ajouter une adresse pour l'utilisateur
	 * connecté à l'application.
	 * Besoin pour le CG66 lors de l'impression des courriers de rendez-vous
	 * @default false
	 */
	Configure::write( 'User.adresse', true ); // true = cg66, false = cg93

	/**
	 * Variables apparaissant dans la fiche de calcul du journal de traitement
	 * d'une PDO.
	 *
	 * Pour "désactiver" un chiffre d'affaire maximum, il suffit de mettre un
	 * très grand nombre (par exemple, la constante PHP_INT_MAX).
	 */
	Configure::write( 'Traitementpcg66.fichecalcul_coefannee1', 1.8 );
	Configure::write( 'Traitementpcg66.fichecalcul_coefannee2', 1.8 );

	Configure::write( 'Traitementpcg66.fichecalcul_cavntmax', PHP_INT_MAX );
	Configure::write( 'Traitementpcg66.fichecalcul_casrvmax', PHP_INT_MAX );
	Configure::write( 'Traitementpcg66.fichecalcul_caagrimax', PHP_INT_MAX );

	Configure::write( 'Traitementpcg66.fichecalcul_abattbicvnt', 71 );
	Configure::write( 'Traitementpcg66.fichecalcul_abattbicsrv', 50 );
	Configure::write( 'Traitementpcg66.fichecalcul_abattbncsrv', 34 );
	Configure::write( 'Traitementpcg66.fichecalcul_abattagriagri', 87 );

	/**
	 * Affiche ou non l'alerte de fin de session et exécute la redirection
	 */
	Configure::write( 'alerteFinSession', true );

	/**
	 * Durée du délai (en jours) accordé pour la création d'un nouveau contrat pour
	 * le thème "non orientation professionelle"
	 */
	Configure::write( 'Nonorientationproep66.delaiCreationContrat', 60 );

	/**
	 *  Permet de définir si on peut ou non ajouter une nouvelle orientation à un dossier
	 *   - toppersdrodevorsa     --> par défaut 1 (personne soumise à droit et devoir)
	 *   - situationetatdosrsa   --> par défaut array( 'Z', 2, 3, 4) (dossier dans un droit ouvert et versable)
	 *
	 * INFO: depuis le passage en CakePHP 2.x, il faut mettre les valeurs numériques entre apostrophes.
	 */
	Configure::write( 'AjoutOrientationPossible.toppersdrodevorsa', array( null, '0', '1' ) ); // aucune distincton sur le soumis à droit et devoir

	/**
	 * Permet de spécifier si les recherches sur l'identifiant Pôle Emploi d'un
	 * allocataire doivent se faire sur les 8 derniers chiffres de l'identifiant
	 * (true) ou sur la totalité de celui-ci (false).
	 *
	 * @default false
	 */
	Configure::write( 'Recherche.identifiantpecourt', true );

	/**
	 * Spécifie l'intervalle, par-rapport à la date de fin d'un CER, en deçà duquel
	 * un CER sera positionné « En cours:Bilan à réaliser » grâce au shell
	 * positioncer66.
	 *
	 * Voir le document app/docs/Documentation administrateurs.odt, partie
	 * "Intervalles PostgreSQL"
	 */
	Configure::write( 'Contratinsertion.Cg66.updateEncoursbilan', '2 month' );

	/**
	 * Variable contenant un array avec les id des typesorients du grand social et de l'emploi
	 */
	Configure::write( 'Orientstruct.typeorientprincipale', array( 'SOCIAL' => array( 4, 6 ), 'Emploi' => array( 1 ) ) );

	/**
	 * Durée du délai (intervalle) entre la date de validation de l'orientation et la date
	 * d'inscription au Pôle Emploi
	 *
	 * Voir le document app/docs/Documentation administrateurs.odt, partie
	 * "Intervalles PostgreSQL"
	 */
	Configure::write( 'Selectionnoninscritspe.intervalleDetection', '2 months' );

	/**
	 * 	Mise en paramétrage de la liste des chargés d'insertion et secrétaire liés à une fiche de candidature
	 * 	@default: id des group auxquels les personnes sont liées
	 * 	Mise en place suite à la demande d'améliorations du 28/02/2012 ( #5630 )
	 */
	Configure::write( 'Chargeinsertion.Secretaire.group_id', array( 16, 7, 12 ) );

	/**
	 * Configuration du composant Email de CakePHP pour l'envoi de mails.
	 * Ne pas oublier de configurer le fichier php.ini
	 *
	 * @see http://book.cakephp.org/1.2/en/view/481/Sending-A-Message-Using-SMTP
	 */
	Configure::write(
		'Email',
		array(
			'smtpOptions' => array(
				'port'=>'25',
				'timeout'=>'30',
				'host' => 'karibu.cg66.fr',
				'username'=>'',
				'password'=>'',
				'client' => 'smtp_helo_hostname'
			)
		)
	);

	/**
	 * Configuration des adresses mails d'expéditeur pour l'envoi de mails concernant
	 * les pièces manquantes de l'APRE (CG 66).
	 */
	Configure::write( 'Apre66.EmailPiecesmanquantes.from', 'emailaprefrom@cgxxxx.fr' );
	Configure::write( 'Apre66.EmailPiecesmanquantes.replyto', Configure::read( 'Apre66.EmailPiecesmanquantes.from' ) );

	/**
	 * 	Délai pour la détection des CERs non validés et notifiés il y a 1 mois et demi
	 */
	Configure::write( 'Criterecer.delaidetectionnonvalidnotifie', '45 days' );

	/**
	 * Variable contenant un array avec les id des 3 seuls typesorients nécessaires aux non orientés
	 */
	Configure::write( 'Nonoriente66.notisemploi.typeorientId', array( '5', '7', '2' ) );

	/**
	 * Variable contenant un id pour les typesorients Social par défaut
	 * dans la gestion des réponses des non orientés 66
	 */
	Configure::write( 'Nonoriente66.TypeorientIdSocial', 7 );

	/**
	 * Variable contenant un id pour les typesorients Prépro par défaut
	 * dans la gestion des réponses des non orientés 66
	 */
	Configure::write( 'Nonoriente66.TypeorientIdPrepro', 5 );

	/**
	 * Configuration des adresses mails d'expéditeur pour l'envoi de mails concernant
	 * les fiches de candidature (CG 66).
	 */
	Configure::write( 'FicheCandidature.Email.from', 'emailaprefrom@cgxxxx.fr' );
	Configure::write( 'FicheCandidature.Email.replyto', Configure::read( 'FicheCandidature.Email.from' ) );

	/**
	 * Lorsque l'on enregistre un CER au CG 66, on vérifie si l'allocataire a un dernier rendez-vous
	 * de type "01 - Convocation à un Entretien - Contrat" ayant le statut "Prévu".
	 * Si c'est le cas, on le passe à "Venu(e)"
	 */
	Configure::write(
		'Contratinsertion.Cg66.Rendezvous',
		array(
			'conditions' => array(
				// Table typesrdv: "01 - Convocation à un Entretien - Contrat"
				'typerdv_id' => 1,
				// Table statutsrdvs: "Prévu"
				'statutrdv_id' => 17
			),
			// Table statutsrdvs: "Venu(e)"
			'statutrdv_id' => 1
		)
	);

	/**
	 * Variable contenant un integer (âge de l'allocataire) pour la limite d'âge à atteindre
	 * pour que la tacite reconduction soit autorisée.
	 * Permet également d'autoriser la création d'un CER au-delà de la limite des 24 mois
	 */
	Configure::write( 'Tacitereconduction.limiteAge', 55 );

	/**
	 * Variable contenant un integer (id stocké en base) pour la description du traitement PCG
	 * devant être pris en compte pour la corbeille PCG
	 */
	Configure::write( 'Corbeillepcg.descriptionpdoId', array( '1' ) );

	/**
	 * Configuration de la gestion des mots de passe oubliés et du générateur de
	 * mots de passes aléatoire.
	 *
	 * Configuration par défaut:
	 * <pre>
	 * array(
	 *	// Permet-on l'utilisation de la fonctionnalité "Mot de passe oublié" sur la page de login ?
	 * 	'mail_forgotten' => false,
	 *	//
	 * 	'generators' => array(
	 * 		'default' => 'Password.PasswordPassword'
	 * 	),
	 * 	'checkers' => array(
	 * 		'default' => 'Password.PasswordAnssi'
	 * 	),
	 *  // 1°) Pour le générateur de mots de passe par défaut Password.PasswordPassword
	 * 	'length' => 8,
	 *	// Doit-on exclure les caractères équivoques 0, 1, l, i, o, I, O ?
	 * 	'typesafe' => true,
	 *	// Nombres de 0 à 9
	 * 	'class_number' => true,
	 *	// Minuscules de a à z
	 * 	'class_lower' => true,
	 *	// Majuscules de a à z
	 * 	'class_upper' => true,
	 *	// Caractères spéciaux ,;.!?*+-
	 * 	'class_symbol' => true
	 * )
	 * </pre>
	 */
	Configure::write( 'Password', array( 'mail_forgotten' => true ) );

    /**
	 * Variable contenant une chaîne de caractères (stockée en base) pour le
	 * n° de convention annuelle d'objectifs et de moyens
     * (unqiue par année et qui devant être changé chaque année)
     * Cui.numconventionobj
	 */
    Configure::write( 'Cui.Numeroconvention', '0661300001' );

    /**
	 * Paramètre à renseigner pour détecter les actions qui sont de type région
     *  (utilisé dans le module Fiche de candidature)
	 * @default: id de(s) l'action(s) de type région
     * @param array
     * exemple : Configure::write( 'ActioncandidatPersonne.Actioncandidat.typeregionId', array( '178', '124' ) );
     *  178 = Action Région à Moyen Terme,
     *  124 = Actions Région : Formations API - PRQ - ERI
     *
	 */
	Configure::write( 'ActioncandidatPersonne.Actioncandidat.typeregionId', array( '124', '178' ) );

    /**
	 * L'id technique de l'enregistrement de la table statutsrdvs ("Statut du RDV")
	 * qui indique que l'allocataire était présent
	 *
	 * Utilisé pour vérifier l'état du RDV et bloquer l'ajout d'un nouveau RDV
     * si le RDV en cours est à l'état "Prévu"
	 *
	 * @var integer
	 * @default null
	 */
	Configure::write( 'Rendezvous.Ajoutpossible.statutrdv_id', 17 );

    /**
	 * Paramètre à renseigner pour détecter les partenaires d'actions qui sont de type région
     * (Utilisé dans la recherche par Fiche de candidature)
	 * @default: id de(s) partenaires de l'action
     * @param array
     * exemple : Configure::write( 'ActioncandidatPersonne.Partenaire.id', array( '61' ) );
	 */
    Configure::write( 'ActioncandidatPersonne.Partenaire.id', array( '61' ) );

    /**
     * Paramètre permettant de noter l'identifiant de la structure référente
     * ne devant pas être considérée comme un organisme agréé pour l'affichage
     * du message "Ce dossier est géré par un organisme agréé" au niveau du
     * dossier menu.
     * Ce paramètre est ajouté car les structures Pôle Emploi sont vues comme des OA
     * pour la gestion en cohorte des non orientés (inscrits/non inscrits PE) et cela
     * permet de ne pas générer d'anomalies dans la gestion par listes.
     *
     * @default: id de(s) structure(s) référente(s)
     * @param: array
     * exemple: pour Pôle Emploi
     *  Configure::write( 'Nonorganismeagree.Structurereferente.id', array( '23' ) );
     */
    Configure::write( 'Nonorganismeagree.Structurereferente.id', array( '23' ) );

    /**
	 * Paramètre à renseigner pour détecter les actions qui sont de type région
     *  (utilisé dans le module Fiche de candidature) et qui déclenche un suivi CG
	 * @default: id de(s) l'action(s) de type région
     * @param array
     * exemple : Configure::write( 'ActioncandidatPersonne.Actioncandidat.typeregionId', array( '178' ) );
     *  178 = Action Région à Moyen Terme
	 */
    Configure::write( 'ActioncandidatPersonne.Actioncandidat.typeregionPoursuitecgId', array( '178' ) );

	/**
	 * Permet de spécifier les noms de serveurs servant d'environnement de
	 * production afin que les mails ne soient pas envoyés à leurs destinataires
	 * "normaux", mais à l'expéditeur du mail.
	 *
	 * @see WebrsaEmailConfig::isTestEnvironment()
	 *
	 * @param array
	 *
	 * @default null
	 */
	Configure::write( 'WebrsaEmailConfig.testEnvironments', array( 'lupus.cg66.fr' ) );

	/**
	 * Permet d'utiliser le module ROME V3:
	 *	- pour tous les départements:
	 *		* shell: ImportCsvCodesRomeV3Shell
	 *		* menu: Administration > Paramétrages > Codes ROME V3 (en fonction des habilitations)
	 *		* menu: Recherches > Par DSP
	 *		* menu du dossier RSA: DEM ou CJT > Droit > DSP d'origine
	 *		* menu du dossier RSA: DEM ou CJT > Droit > MAJ DSP
	 */
	Configure::write( 'Romev3.enabled', true );

	/**
	 * Lorsque un CER est complexe, il ne sera clôt que si il dépasse la
         * date de cloture + la valeur de cette variable
	 *
	 * Voir le document app/docs/Documentation administrateurs.odt, partie
	 * "Intervalles PostgreSQL"
	 */
	Configure::write( 'Contratinsertion.Cg66.toleranceDroitClosCerComplexe', '6 months' );

	/**
	 * Validation javascript - Options
	 */
	Configure::write( 'ValidationJS.enabled', true );
	Configure::write( 'ValidationOnchange.enabled', true );
	Configure::write( 'ValidationOnsubmit.enabled', true );

	/**
	 * Ordre d'affichage des dossiers EP selon différentes actions (voir l'URL,
	 * ajouter le suffixe .order).
	 *
	 * Les clés de configuration sont les suivantes (CG 58, 66 et 93):
	 * 	- Dossierseps.choose.order
	 * 	- Commissionseps.decisionep.order
	 * 	- Commissionseps.decisioncg.order (CG 66 et 93 uniquement)
	 * 	- Commissionseps.printOrdresDuJour.order
	 * 	- Commissionseps.traiterep.order
	 * 	- Commissionseps.traitercg.order (CG 66 et 93 uniquement)
	 */
	$order = array( 'Personne.nom', 'Personne.prenom' );
	Configure::write( 'Dossierseps.choose.order', $order );
	Configure::write( 'Commissionseps.decisionep.order', $order );
	Configure::write( 'Commissionseps.decisioncg.order', $order );
	Configure::write( 'Commissionseps.printOrdresDuJour.order', $order );
	Configure::write( 'Commissionseps.traiterep.order', $order );
	Configure::write( 'Commissionseps.traitercg.order', $order );

	/**
	 * Validation parametrable pour l'allowEmpty
	 */
	Configure::write('ValidateAllowEmpty.Adresse.libtypevoie', true);
	Configure::write('ValidateAllowEmpty.Adresse.nomvoie', true);
	// Le champ "Date de demande" d'un dossier RSA doit être un champ obligatoire
	Configure::write('ValidateAllowEmpty.Dossier.dtdemrsa', false);

	/**
	 * Permet de désactiver le "cadenas" situé en haut à droite
	 */
	Configure::write( 'Etatjetons.enabled', true );

	/**
	 * Permet de désactiver l'Editeur de requêtes
	 */
	Configure::write( 'Requestmanager.enabled', true );

	/**
	 * Utilisation de la table AdresseCanton pour utiliser les cantons calculé au préalable par Console (CRON)
	 */
	Configure::write( 'Canton.useAdresseCanton', (boolean)Configure::read( 'CG.cantons' ) );

	/**
	 * Alerte pour le changement d'adresse
	 * delai en nombre de mois
	 */
	Configure::write( 'Alerte.changement_adresse.enabled', true );
	Configure::write( 'Alerte.changement_adresse.delai', 2 );

	/**
	 * Réglages d'imprimante
	 */
	$imprimanteRectoVerso = true;
	Configure::write( 'Dossierspcgs66.imprimer.Impression.RectoVerso', $imprimanteRectoVerso );
	Configure::write( 'Dossierspcgs66.imprimer_cohorte.Impression.RectoVerso', $imprimanteRectoVerso );

	/**
	 * Option dynamique dans les EPs
	 */
	Configure::write( 'Commissionseps.defautinsertionep66.decision.type',
		array(
			'maintienorientsoc' => array('social', 'social'),
			'reorientationprofverssoc' => array('emploi', 'social'),
			'reorientationsocversprof' => array('social', 'emploi'),
		)
	);
	// ID de Emploi - Pôle emploi, peut contenir plusieurs valeurs (si besoin)
	Configure::write( 'Commissionseps.defautinsertionep66.isemploi', array(2) );

	/**
	 * Permet d'activer l'utilisation du module CUI.
	 *
	 * @var boolean
	 * @default null
	 */
	Configure::write( 'Module.Cui.enabled', true );

	/**
	 * ID de la valeur du Tag à créer lorsque on "Tag" depuis Gestionsdoublons::index()
	 */
	Configure::write('Gestionsdoublons.index.useTag', true);
	Configure::write('Gestionsdoublons.index.Tag.valeurtag_id', 1); // N'est pas un doublon

	/**
	 * Options modifiable des cohortes liés aux tags (TAG et DossierPCG)
	 */
	Configure::write('Tag.Options.enums',
		array(
			'Personne' => array(
				// Tranche d'age des personnes (25_30 sera entre 25 et 30 ans)
				'trancheage' => array(
					'0_24' => '< 25',
					'25_30' => '25 - 30',
					'31_55' => '31 - 55',
					'56_65' => '56 - 65',
					'66_999' => '> 65',
				),
			),
			'Foyer' => array(
				// Nombre d'enfants à charge dans un foyer (Nombre d'enfants sera >= à la clef de l'array
				'nb_enfants' => array(
					0 => '0',
					1 => '>= 1',
					2 => '>= 2',
					3 => '>= 3',
					4 => '>= 4',
					5 => '>= 5',
				)
			),
			'Detailcalculdroitrsa' => array(
				// Montant du RSA (200_299 sera entre 200 et 299)
				'mtrsavers' => array(
					'0_99' => '< 100€',
					'100_199' => '100€ - 199€',
					'200_299' => '200€ - 299€',
					'300_399' => '300€ - 399€',
					'400_499' => '400€ - 499€',
					'500_599' => '500€ - 599€',
					'600_699' => '600€ - 699€',
					'800_999' => '800€ - 999€',
					'999_9999' => '> 1000 €',
				),
			),
		)
	);

	/**
	 * Sauvegarde recherches
	 */
	Configure::write('Module.Savesearch.enabled', true);
	Configure::write('Module.Savesearch.mon_menu.enabled', true); // Ajoute un element au Menu de navigation
	Configure::write('Module.Savesearch.mon_menu.name', 'Mon menu'); // Nom du menu supplémentaire

	/**
	 * Fiche de liaison
	 * Défini l'origine d'un dossier PCG crée par la primoanalyse d'une fiche de liaison
	 */
	Configure::write('Fichedeliaisons.typepdo_id', 18);

	/**
	 * Affiche les anciens moteurs de cohorte et de recherche pour comparaison
	 */
	Configure::write('Anciensmoteurs.enabled', false);

	/**
	 * Export CSV des droits des groupes
	 */
	Configure::write('Module.Synthesedroits.enabled', true);

	/**
	 * Nouveaux moteurs de recherche, permet d'afficher la liste des codes INSEE
	 * sous forme de cases à cocher multiples plutôt que sous forme de liste
	 * déroulante.
	 *
	 * La clé "multiple" permet d'activer cette fonctionnalité.
	 * La clé "multiple_larger_1" permet de retrouver la liste déroulante
	 * "classique" si le nombre de codes INSEE est inférieur ou égal à 1.
	 *
	 * @var boolean
	 * @default null
	 */
	Configure::write(
		'ConfigurableQuery.common.filters.Adresse.numcom',
		array(
			'multiple' => false,
			'multiple_larger_1' => false
		)
	);

	/**
	 * Affichage de Fleches pour effectuer un order sur les colonnes de résultat
	 */
	Configure::write('ConfigurableQuery.common.two_ways_order.enabled', true);

	/**
	 * Nouveau système d'attribution des droits (par Controllers)
	 */
	Configure::write('Module.Attributiondroits.enabled', true);

	/**
	 * Options modifiable des moteurs de recherche et de cohorte
	 */
	Configure::write('Search.Options.enums',
		array(
			'Personne' => array(
				// Tranche d'age des personnes (25_30 sera entre 25 et 30 ans)
				'trancheage' => array(
					'0_24' => '- 25 ans',
					'25_34' => '25 - 34 ans',
					'35_44' => '35 - 44 ans',
					'45_54' => '45 - 54 ans',
					'55_999' => '+ 55 ans'
				),
			),
		)
	);

	/**
	 * Visualisation des données CAF d'une personne
	 */
	Configure::write('Module.Donneescaf.enabled', true);

	/**
	 * Configuration des plages horaires d'accès à l'application.
	 *
	 * Lorsque cette fonctionnalité est activée, il n'est possible d'être connecté
	 * que dans une plage horaire et hormis certains jours de la semaine.
	 * Il est possible de spécifier certains groupes d'utilisateurs qui ne seront
	 * pas affectés par cette limitation.
	 *
	 * Les clés de configuration sont les suivantes:
	 *	- enabled: mettre à true pour utiliser cette fonctionnalité; booléen, null
	 *	  (false) par défaut
	 *	- heure_debut: l'heure à partir de laquelle (incluse) les utilisateurs
	 *	  peuvent se connecter, integer entre 0 et 23; 1 par défaut
	 *	- heure_fin: l'heure jusqu'à laquelle (incluse) les utilisateurs peuvent
	 *	  se connecter; integer entre 0 et 23; 23 par défaut
	 *	- jours_weekend: les jours de la semaine qui constituent le week-end;
	 *	  array de string parmi 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun';
	 *	  array( 'Sat', 'Sun' ) par défaut
	 *	- groupes_acceptes: ids techniques des groupes d'utilisateurs non soumis
	 *	  à ces restrictions (ex. les Administrateurs); array d'integers; array()
	 *	  par défaut
	 *
	 * La configuration est vérifiée dans la partie "Administration" > "Vérification
	 * de l'application".
	 */
	Configure::write(
		'Module.PlagesHoraires',
		array(
			'enabled' => false,
			'heure_debut' => 8,
			'heure_fin' => 19,
			'jours_weekend' => array( 'Sat', 'Sun' ),
			'groupes_acceptes' => array( 1 )
		)
	);

	/**
	 * Suffix des fichiers de traductions spécialisés pour le CG
	 * ex: controller_action_suffix.po -> dossiers_index_cg01.po
	 */
	Configure::write('WebrsaTranslator.suffix', 'cg'.Configure::read('Cg.departement'));

	/**
	 * /!\ N'activer ce module que sur une période courte /!\
	 * Permet de logger tous les appels de pages, active également l'accès au module de visualisation dans administration
	 * Désactiver et supprimer app/tmp/logs/trace.log après utilisation
	 */
	Configure::write('Module.Logtrace.enabled', false);
	Configure::write('Module.Logtrace.total_duration', 60 * 60 * 1); // Durée en secondes du graph (max 32746)

	/**
	 * Active le module date picker (calendrier javascript)
	 */
	Configure::write('Module.Datepicker.enabled', true);

	/**
	 * Affichage de messages autour du logo
	 */
	//$enabled = Configure::read('debug') > 0; // Ne s'affiche que si mode debug activé
	//$beforeLogoText = $enabled && isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : ''; // Affichera le nom du serveur
	//$afterLogoText = $enabled ? file_get_contents(APP.'VERSION.txt') : ''; // Affichera la version webrsa

	//Configure::write('UI.beforeLogo.text', $beforeLogoText);
	//Configure::write('UI.afterLogo.text', $afterLogoText);

	/**
	 * Tableau de bord principal
	 */
	Configure::write('Module.Dashboards.enabled', true);

	/**
	 * Permet le redimensionnement automatique des textarea
	 *
	 * textarea.auto_resize.all => tout les textarea
	 * textarea.auto_resize.controllername.all => tout les textarea d'un controlleur en particulier
	 * textarea.auto_resize.controllername.action => tout les textarea d'un controlleur et d'une action en particulier
	 */
	Configure::write('textarea.auto_resize.all', true);

	/**
	 * Filtre de recherche par Prestations
	 * Il est possible de remplacer la clef "common" par "Controller.action"
	 * pour spécifier par Controller et par action
	 * Si "common" est spécifié en plus du "Controller.action",
	 * la configuration de "Controller.action" prend le dessus
	 *
	 * Valeurs possibles (array) :
	 * 0 = Sans prestation
	 * 1 = Demandeur ou Conjoint
	 * 'DEM' = Demandeur
	 * 'CJT' = Conjoint
	 * 'ENF' = Enfant
	 * 'AUT' = Autre
	 * 'RDO' = Responsable du dossier
	 */
	Configure::write('ConfigurableQuery.common.filters.has_prestation', array(0, 1, 'DEM', 'CJT'));

	/**
	 * Permet l'affichage des erreurs cachés
	 */
	Configure::write('Module.DisplayValidationErrors.enabled', true);

	/**
	 * Permet de filtrer les modules visibles dans l'onglet "Droits" des formulaires
	 * d'ajout et de modification des groupes et des utilisateurs en fonction du
	 * département connecté ainsi que des modules activés.
	 *
	 * L'idée est que les modules en question ne sont normalement pas accessibles
	 * et qu'il ne font donc qu'ajouter de la complexité dans ces écrans de droits.
	 *
	 * Une valeur "null" ou "false" filtre les permissions, une valeur "true" ne
	 * les filtre pas (comme avant la version 3.2.0).
	 *
	 * @default null
	 */
	Configure::write( 'Module.Permissions.all', false );

	/**
	 * Permet de faire apparaître ou non dans le menu "Administration" le
	 * sous-menu "Flux CNAF" qui ne sert qu'aux développeurs car ces écrans
	 * présentent le format technique des flux CNAF.
	 */
	Configure::write( 'Module.Fluxcnaf.enabled', false );

	/**
	 * Nombre d'enregistrements de la table correspondancespersonnes à sauvegarder
	 * par "tranche" via le shell CorrespondancepersonneShell afin d'éviter de
	 * saturer la mémoire lors du traitement.
	 *
	 * @type integer
	 * @default 250000
	 */
	Configure::write( 'Correspondancepersonne.max', 250000 );

	/**
	 * Permet d'ajouter une orientation "Non orienté" aux bénéficiaires d'un foyer
	 * dès lors qu'ils sont soumis à droits et devoirs et que l'on ajoute ou
	 * modifie une personne du foyer ou que l'on ajoute ou modifie une ressource
	 * d'une personne du foyer.
	 *
	 * @type boolean
	 * @default null|false
	 */
	Configure::write( 'Foyer.refreshSoumisADroitsEtDevoirs.ajoutOrientstruct', null );

	/**
	 * Blocage des thématiques pour les EP
	 */
	Configure::write(
		'Blocage.thematique.ep',
		array (
		)
	);
?>