<?php

// +----------------------------------------------------------------------+
// | PHP Version 5.3                                                      |
// +----------------------------------------------------------------------+
// | Copyright (c) 2004 Lille Metropole Communaute Urbaine (LMCU)         |
// +----------------------------------------------------------------------+
// | This file is part of GED'OOo.                                        |
// |                                                                      |
// | GED'OOo is free software; you can redistribute it and/or modify      |
// | it under the terms of the GNU General Public License as published by |
// | the Free Software Foundation; either version 2 of the License, or    |
// | (at your option) any later version.                                  |
// |                                                                      |
// | Tiny is distributed in the hope that it will be useful,              |
// | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
// | GNU General Public License for more details.                         |
// |                                                                      |
// | You should have received a copy of the GNU General Public License    |
// | along with GED'OOo; if not, write to the Free Software Foundation,   |
// | Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA        |
// +----------------------------------------------------------------------+
// | Authors:Philippe Allart                                              |
// +----------------------------------------------------------------------+
//
require_once("GDO_Utility.class");
require_once("GDO_FieldType.class");
require_once("GDO_ContentType.class");
require_once("GDO_IterationType.class");
require_once("GDO_PartType.class");
require_once("GDO_FusionType.class");
require_once("GDO_MatrixType.class");
require_once("GDO_MatrixRowType.class");
require_once("GDO_AxisTitleType.class");

/*
 * Classe GDO_XML2GEDOOo
 * ---------------
 * Cette classe fournit les fonctionnalités pour transformer
 * une chaîne XML conforme à la première version de GED'OOo
 * en objets conformes à la dernière version
 *
 * Version 1.0
 */
 
Class GDO_XML2GEDOOo {
 
 	// }}}
    // {{{ ElmtToField()

    /**
     * Convertit un élément "champ" en FieldType
     *
	 * @param    objet		L'élément XML de type "champ"
     * @return   objet      L'objet de type FieldType
     * @since    1.0
     * @access   public
     */
function ElmtToField($oElmt) {
	return new GDO_FieldType($oElmt["nom"], $oElmt["valeur"], $oElmt["type"]);
}

	// }}}
    // {{{ ElmtToIteration()

    /**
     * Convertit un élément "bloc" en IterationType
     *
	 * @param    objet		L'élément XML de type "bloc"
     * @return   objet      L'objet de type Iteration
     * @since    1.0
     * @access   public
     */
function ElmtToIteration($oElmt) {
//	echo "<br>Iteration ". (string)$oElmt["nom"] ."<br>";
	$oIteration = new GDO_IterationType((string)$oElmt["nom"]);
	foreach($oElmt->children() as $part) {
		$oIteration->addPart($this->ElmtToPart($part));
		}
	return($oIteration);
}

	// }}}
    // {{{ ElmtToContent()

    /**
     * Convertit un élément "champ" de type "image" ou "contenu" en ContentType
     *
     * @param    objet		L'élément XML de type "champ"
     * @return   objet      L'objet de type ContenType
     * @since    1.0
     * @access   public
     */
function ElmtToContent($oElmt) {


$aElements = array();

	foreach($oElmt->children() as $sName => $sValue) {
		$aElements[$sName] = (string)$sValue;
	}
	
	$sTarget = $aElements["nom"];
	$sValue = $aElements["valeur"];
	$sType = strtolower($aElements["type"]);
	
	$u = new GDO_Utility();
	
	
	$bIsURL = eregi("(http|file)://.*", $sValue);
	
	if ($bIsURL) {
	    switch ($sType) {
			case "html" :
				$sMimeType = "text/html";
				break;
			case "image" :
				$sMimeType = $u->getMimeType($sValue);
				if (!ereg("^image/.*", $sMimeType)) $sMimeType="image";
				break;
			case "content" :
				$sMimeType = $u->getMimeType($sValue);
				if (!ereg("^application/.*", $sMimeType)) $sMimeType="application";
				break;
			}
			return (new GDO_ContentType($sTarget, "", $sMimeType, "url", $sValue));
		} else {
	    switch ($sType) {
			case "html" :
				$sMode = "text";
				$sMimeType = "text/html";
				break;
			case "image" :
				$sMode = "binary";
				$sMimeType = "image";
				break;
			case "content" :
				$sMode = "binary";
				$sMimeType = "application";
				break;
			}
			return (new GDO_ContentType($sTarget, "", $sMimeType, $sMode, $sValue));
		
		}
}


	// }}}
    // {{{ ElmtToFieldOrContent()

    /**
     * Convertit un élément "champ" soit en FieldType soi en ContentType.
     * Les champs de type "image" ou "content" sont convertis en ContentType.
     * Les autres en FieldType
     *
     * @param    objet		L'élément XML de type "champ"
     * @return   objet      L'objet de type FieldType ou ContentType
     * @since    1.0
     * @access   public
     */
function ElmtToFieldOrContent($oElmt) {
$aElements = array();

	foreach($oElmt->children() as $sName => $sValue) {
		$aElements[$sName] = (string)$sValue;
	}
	if ( strtolower($aElements["type"]) == "content" ||
		 strtolower($aElements["type"]) == "image" ||
		 strtolower($aElements["type"]) == "html") {
		return($this->ElmtToContent($oElmt));
	} else {
		return new GDO_FieldType($aElements["nom"], $aElements["valeur"], strtolower($aElements["type"]));
	} 

}

function ElmtToMatrix($oElmt) {

	$aElmt = $oElmt->children();
	//
	// Recherche de la balise "target"
	// normalement en premiï¿½re position		
	
	foreach($aElmt as $sName => $sValue) {
		switch (strtolower($sName)) {
			case "target" :
				$matrix = new GDO_MatrixType($sValue);
				break;
			}
		if (isset($matrix)) break;
		
	}	
	foreach($aElmt as $sName => $sValue) {
		switch (strtolower($sName)) {
			case "title" :
				$matrix->setTitle($sValue);
				break;
			case "rowtitles" :
				$matrix->setRowTitles(GDO_ElmtToAxisTitles($sValue));
				break;
			case "columntitles" :
				$matrix->setColumnTitles(GDO_ElmtToAxisTitles($sValue));
				break;
			case "rowdata" :
				$matrix->addRow(GDO_ElmtToMatrixElement($sValue));
				break;
			}
		
	}
	return ($matrix);
}

function ElmtToMatrixElement($oElmt) {
	
	foreach ($oElmt->children() as $sName => $sValue) {
		$aValue[] = $sValue;
		}

	$oRawData = new GDO_MatrixElementType($aValue);
	
	return ($oRawData);
}

function ElmtToAxisTitles($oElmt) {

	$oAxisTitles = new GDO_AxisTitleType;
	foreach($oElmt->children() as $sName => $sValue) {
		switch (strtolower($sName)) {
			case "title" :
				$oAxisTitles->setTitle($sValue);
				break;
			case "description" :
				$aAxisTitles[] = $sValue;
				break;
		}
	}
	if (isset($aAxisTitles)) $oAxisTitles->setDescription($aAxisTitles);
	
	return($oAxisTitles);
}


	// }}}
    // {{{ ElmtToPart()

    /**
     * Convertit un élément "ligne" en PartType
     *
	 * @param    objet		L'élément XML de type "ligne"
     * @return   objet      L'objet de type PartType
     * @since    1.0
     * @access   public
     */
function ElmtToPart($oElmt) {
	$oPart = new GDO_PartType;
	
	if ($oElmt != null) foreach($oElmt->children() as $sType => $sChild) {
		switch ($sType) {
			case "champ" :
			$oPart->addElement($this->ElmtToFieldOrContent($sChild));
			break;
			case "bloc" :
			$oPart->addElement($this->ElmtToIteration($sChild));
			break;
			case "matrix" :
			$oPart->addElement($this->ElmtToMatrix($sChild));
			break;
		}
	}
	return($oPart->finish());
}


function XMLToPart($sXMLparm) {

$sXML = $sXMLparm;

if (strpos($sXML, '<![CDATA[')) {
   function parseCDATA($data) {
      return htmlentities($data[1]);
   }
   $sXML = preg_replace_callback(
      '#<!\[CDATA\[(.*)\]\]>#',
      'parseCDATA',
      str_replace("\n", " ", $sXML)
   		);
	}
	$aParsedDocument = simplexml_load_string("<XML>".$sXML."</XML>");
	if (!$aParsedDocument) {
		if (ereg("^ *$", $sXML)) {
			$aParsedDocument = null;
			} else {
			throw new Exception("Unable to parse XML document:\n".$sXMLparm);
			}
		}
	$oPart = $this->ElmtToPart($aParsedDocument);
	return ($oPart);

}
 
}
 
 
 
 ?>