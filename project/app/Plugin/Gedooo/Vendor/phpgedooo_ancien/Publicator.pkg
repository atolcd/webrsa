<?php

// +----------------------------------------------------------------------+
// | PHP Version 5.3                                                      |
// +----------------------------------------------------------------------+
// | Copyright (c) 2004 Lille Metropole Communaute Urbaine (LMCU)         |
// +----------------------------------------------------------------------+
// | This file is part of GED'OOo.                                        |
// |                                                                      |
// | GED'OOo is free software; you can redistribute it and/or modify      |
// | it under the terms of the GNU General Public License as published by |
// | the Free Software Foundation; either version 2 of the License, or    |
// | (at your option) any later version.                                  |
// |                                                                      |
// | Tiny is distributed in the hope that it will be useful,              |
// | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
// | GNU General Public License for more details.                         |
// |                                                                      |
// | You should have received a copy of the GNU General Public License    |
// | along with GED'OOo; if not, write to the Free Software Foundation,   |
// | Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA        |
// +----------------------------------------------------------------------+
// | Authors:Philippe Allart                                              |
// +----------------------------------------------------------------------+
//
require_once("GDO_wsdl.inc");
require_once("GDO_FieldType.class");
require_once("GDO_ContentType.class");
require_once("GDO_IterationType.class");
require_once("GDO_PartType.class");
require_once("GDO_FusionType.class");
require_once("GDO_MatrixType.class");
require_once("GDO_MatrixRowType.class");
require_once("GDO_AxisTitleType.class");

//###################################################################################
/*
 * Am�nagements particuliers pour int�ragir avec le Web Service
 * ------------------------------------------------------------*
 */
 

	// }}}
    // {{{ GDO_ReadFile()

    /**
     * renvoi le contenu d'un fichier
     *
     * @return   binary      Le contenu du fichier dans l'�tat
     * @since    1.0
     * @access   public
     */
function GDO_ReadFile($sFileName) {

//echo $sFileName;
$iFile = fopen($sFileName, "rb");

while ($tmp = fread($iFile, 1024))
    {
        $sData .= $tmp;
    } 
//$sData = fread($iFile, filesize($sFileName));
fclose($iFile);

return $sData;
}

	// }}}
    // {{{ GDO_WriteFile()

    /**
     * Ecriture dans un fichier
     *
     * @param    string      $sFileName	le nom du fichier
     * @param    binary      $bData Le contenu � �crire
     * @since    1.0
     * @access   public
     */
function GDO_WriteFile($sFileName, $bData) {

	$iFile = fopen($sFileName, "wb");
	fwrite($iFile ,$bData);
	fclose($iFile);

}


	// }}}
    // {{{ GDO_ElmtToField()

    /**
     * Convertit un �l�ment "champ" en FieldType
     *
	 * @param    objet		L'�l�ment XML de type "champ"
     * @return   objet      L'objet de type FieldType
     * @since    1.0
     * @access   public
     */
function GDO_ElmtToField($oElmt) {
	return new GDO_FieldType($oElmt["nom"], $oElmt["valeur"], $oElmt["type"]);
}

	// }}}
    // {{{ GDO_ElmtToIteration()

    /**
     * Convertit un �l�ment "bloc" en IterationType
     *
	 * @param    objet		L'�l�ment XML de type "bloc"
     * @return   objet      L'objet de type Iteration
     * @since    1.0
     * @access   public
     */
function GDO_ElmtToIteration($oElmt) {
//	echo "<br>Iteration ". (string)$oElmt["nom"] ."<br>";
	$oIteration = new GDO_IterationType((string)$oElmt["nom"]);
	foreach($oElmt->children() as $part) {
		$oIteration->addPart(GDO_ElmtToPart($part));
		}
	return($oIteration);
}

	// }}}
    // {{{ GDO_ElmtToContent()

    /**
     * Convertit un �l�ment "champ" de type "image" ou "contenu" en ContentType
     *
     * @param    objet		L'�l�ment XML de type "champ"
     * @return   objet      L'objet de type ContenType
     * @since    1.0
     * @access   public
     */
function GDO_ElmtToContent($oElmt) {


$aElements = array();

	foreach($oElmt->children() as $sName => $sValue) {
		$aElements[$sName] = (string)$sValue;
	}
	
	$sTarget = $aElements["nom"];
	$sValue = $aElements["valeur"];
	$sType = strtolower($aElements["type"]);
	
	
	$bIsURL = eregi("(http|file)://.*", $sValue);
	
	if ($bIsURL) {
	    switch ($sType) {
			case "html" :
				$sMimeType = "text/html";
				break;
			case "image" :
				$sMimeType = GDO_getMimeType($sValue);
				if (!ereg("^image/.*", $sMimeType)) $sMimeType="image";
				break;
			case "content" :
				$sMimeType = GDO_getMimeType($sValue);
				if (!ereg("^application/.*", $sMimeType)) $sMimeType="application";
				break;
			}
			return (new GDO_ContentType($sTarget, "", $sMimeType, "url", $sValue));
		} else {
	    switch ($sType) {
			case "html" :
				$sMode = "text";
				$sMimeType = "text/html";
				break;
			case "image" :
				$sMode = "binary";
				$sMimeType = "image";
				break;
			case "content" :
				$sMode = "binary";
				$sMimeType = "application";
				break;
			}
			return (new GDO_ContentType($sTarget, "", $sMimeType, $sMode, $sValue));
		
		}
}


	// }}}
    // {{{ GDO_ElmtToFieldOrContent()

    /**
     * Convertit un �l�ment "champ" soit en FieldType soi en ContentType.
     * Les champs de type "image" ou "content" sont convertis en ContentType.
     * Les autres en FieldType
     *
     * @param    objet		L'�l�ment XML de type "champ"
     * @return   objet      L'objet de type FieldType ou ContentType
     * @since    1.0
     * @access   public
     */
function GDO_ElmtToFieldOrContent($oElmt) {
$aElements = array();

	foreach($oElmt->children() as $sName => $sValue) {
		$aElements[$sName] = (string)$sValue;
	}
	if ( strtolower($aElements["type"]) == "content" ||
		 strtolower($aElements["type"]) == "image" ||
		 strtolower($aElements["type"]) == "html") {
		return(GDO_ElmtToContent($oElmt));
	} else {
		return new GDO_FieldType($aElements["nom"], $aElements["valeur"], strtolower($aElements["type"]));
	} 

}

function GDO_ElmtToMatrix($oElmt) {

	$aElmt = $oElmt->children();
	//
	// Recherche de la balise "target"
	// normalement en premi�re position		
	
	foreach($aElmt as $sName => $sValue) {
		switch (strtolower($sName)) {
			case "target" :
				$matrix = new GDO_MatrixType($sValue);
				break;
			}
		if (isset($matrix)) break;
		
	}	
	foreach($aElmt as $sName => $sValue) {
		switch (strtolower($sName)) {
			case "title" :
				$matrix->setTitle($sValue);
				break;
			case "rowtitles" :
				$matrix->setRowTitles(GDO_ElmtToAxisTitles($sValue));
				break;
			case "columntitles" :
				$matrix->setColumnTitles(GDO_ElmtToAxisTitles($sValue));
				break;
			case "rowdata" :
				$matrix->addRow(GDO_ElmtToMatrixElement($sValue));
				break;
			}
		
	}
	return ($matrix);
}

function GDO_ElmtToMatrixElement($oElmt) {
	
	foreach ($oElmt->children() as $sName => $sValue) {
		$aValue[] = $sValue;
		}

	$oRawData = new GDO_MatrixElementType($aValue);
	
	return ($oRawData);
}

function GDO_ElmtToAxisTitles($oElmt) {

	$oAxisTitles = new GDO_AxisTitleType;
	foreach($oElmt->children() as $sName => $sValue) {
		switch (strtolower($sName)) {
			case "title" :
				$oAxisTitles->setTitle($sValue);
				break;
			case "description" :
				$aAxisTitles[] = $sValue;
				break;
		}
	}
	if (isset($aAxisTitles)) $oAxisTitles->setDescription($aAxisTitles);
	
	return($oAxisTitles);
}


	// }}}
    // {{{ GDO_ElmtToPart()

    /**
     * Convertit un �l�ment "ligne" en PartType
     *
	 * @param    objet		L'�l�ment XML de type "ligne"
     * @return   objet      L'objet de type PartType
     * @since    1.0
     * @access   public
     */
function GDO_ElmtToPart($oElmt) {
	$oPart = new GDO_PartType;
	foreach($oElmt->children() as $sType => $sChild) {
		switch ($sType) {
			case "champ" :
			$oPart->addElement(GDO_ElmtToFieldOrContent($sChild));
			break;
			case "bloc" :
			$oPart->addElement(GDO_ElmtToIteration($sChild));
			break;
			case "matrix" :
			$oPart->addElement(GDO_ElmtToMatrix($sChild));
			break;
		}
	}
	return($oPart->finish());
}



//###############################################################################
/*
 * Gestion des types MIME
 * ----------------------*
 */


     // }}}
    // {{{ GDO_extensionToMimeType ()

    /**
     * D�termination d'un type MIME � partir d'une extension
     *
     * @param    string     $sExtension       Extension
     * @since    1.0
     * @access   public
     * @return   string     type MIME
     */

function GDO_extensionToMimeType($sExtension){

	switch (strtolower($sExtension)) {
		case "odt":
   			return "application/vnd.oasis.opendocument.text";
   			break;
		case "ods":
   			return "application/vnd.oasis.opendocument.spreadsheet";
   			break;
		case "odp":
   			return "application/vnd.oasis.opendocument.presentation";
   			break;
   		case "odg":
   			return "application/vnd.oasis.opendocument.graphics";
   			break;
   		case "odc":
   			return "application/vnd.oasis.opendocument.chart";
   			break;
   		case "odf":
   			return "application/vnd.oasis.opendocument.formula";
   			break;
   		case "odb":
   			return "application/vnd.oasis.opendocument.database";
   			break;
   		case "odi":
   			return "application/vnd.oasis.opendocument.image";
   			break;
   		case "odm":
   			return "application/vnd.oasis.opendocument.text-master";
   			break;
   		case "ott":
   			return "application/vnd.oasis.opendocument.text-template";
   			break;
   		case "ots":
   			return "application/vnd.oasis.opendocument.spreadsheet-template";
   			break;
   		case "otp":
   			return "application/vnd.oasis.opendocument.presentation-template";
   			break;
   		case "pdf":
   			return "application/pdf";
   			break;
   		case "doc":
   			return "application/msword";
   			break;
    	case "dxf":
   			return "application/dxf";
   			break;
  		case "jpg":
   		case "jpeg":
   		case "jpe":
  			return "image/jpeg";
   			break;
   		case "gif":
   			return "image/gif";
   			break;
   		case "png":
   			return "image/png";
   			break;
   		case "bmp":
   			return "image/bmp";
   			break;
    	case "tiff":
  		case "tif":
   			return "image/tiff";
   			break;
   		case "svg":
   			return "image/svg+xml";
   			break;
   		case "wmf":
   			return "image/wmf";
   			break;
   		case "emf":
   			return "image/emf";
   			break;
		default:
   			return "application/octet-stream";
   			 
   		
	}
}

    // }}}
    // {{{ GDO_getMimeType ()

    /**
     * D�termination d'un type MIME � partir d'un nom de fichier
     *
     * @param    string     $sNomFichier       Nom du fichier
     * @since    1.0
     * @access   public
     * @return   string     type MIME
     */
function GDO_getMimeType($sFileName){
	$aFileName = explode(".",$sFileName);
	$sExtension = $aFileName[count($aFileName)-1];
	return GDO_extensionToMimeType($sExtension);
}

    // }}}
    // {{{ GDO_typeMimeToExtension ()

    /**
     * renvoi une extension en fonction d'un type MIME
     *
     * @param    string     $sTypeMime       Type MIME
     * @since    1.0
     * @access   public
     * @return   string     Extension
     */
function GDO_typeMimeToExtension($sMimeType) {

	switch (strtolower($sMimeType)) {
   		case "application/vnd.oasis.opendocument.text":
			return "odt";
   			break;
   		case "application/vnd.oasis.opendocument.spreadsheet":
			return "ods";
   			break;
   		case "application/vnd.oasis.opendocument.presentation":
			return "odp";
   			break;
   		case "application/vnd.oasis.opendocument.graphics":
			return "odg";
   			break;
   		case "application/vnd.oasis.opendocument.chart":
			return "odc";
   			break;
   		case "application/vnd.oasis.opendocument.formula":
			return "odf";
   			break;
   		case "application/vnd.oasis.opendocument.database":
			return "odb";
   			break;
   		case "application/vnd.oasis.opendocument.image":
			return "odi";
   			break;
   		case "application/vnd.oasis.opendocument.text-master":
			return "odm";
   			break;
   		case "application/vnd.oasis.opendocument.text-template":
			return "ott";
   			break;
   		case "application/vnd.oasis.opendocument.spreadsheet-template":
			return "ots";
   			break;
   		case "application/vnd.oasis.opendocument.presentation-template":
			return "otp";
   			break;
   		case "application/pdf":
 			return "pdf";
  			break;
   		case "application/msword":
 			return "doc";
  			break;
		default:
			return "bin";
	}
}

    // }}}
    // {{{ GDO_completeFileName ()

    /**
     * Ajout d'une extension � un nom de fichier
     *
     * @param    string     $sName           Nom de fichier � compl�ter
     * @param    string     $sTypeMime       Type MIME
     * @since    1.0
     * @access   public
     * @return   string     Nom de fichier complet
     */
function GDO_completeFileName($sName, $sMimeType) {

	return $sName . "." . GDO_typeMimeToExtension($sMimeType);

}


//####################################################################################

function GDO_XMLToPart($sXMLparm) {

$sXML = $sXMLparm;

if (strpos($sXML, '<![CDATA[')) {
   function parseCDATA($data) {
      return htmlentities($data[1]);
   }
   $sXML = preg_replace_callback(
      '#<!\[CDATA\[(.*)\]\]>#',
      'parseCDATA',
      str_replace("\n", " ", $sXML)
   		);
	}
	$aParsedDocument = simplexml_load_string("<XML>".$sXML."</XML>");
	if (!$aParsedDocument) {
		throw new Exception("Unable to parse XML document:\n".$sXMLparm);
		}
	$oPart = GDO_ElmtToPart($aParsedDocument);

        return ($oPart);

}

?>
